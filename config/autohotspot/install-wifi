#!/bin/bash
# ---------------------------
# combine instructions for automatic wifi-hotspot from
# https://www.raspberryconnect.com/projects/65-raspberrypi-hotspot-accesspoints/158-raspberry-pi-auto-wifi-hotspot-switch-direct-connection

source config

test="" # add value to test the script
date=`date +%y%m%d`
date="-$date"

echo
echo "Install Wifi Auto-hotspot ($date)"
echo "-------------------------------------"
echo "Source: https://www.raspberryconnect.com/" #projects/65-raspberrypi-hotspot-accesspoints/158-raspberry-pi-auto-wifi-hotspot-switch-direct-connection"
echo "Installation script by Christoph Kloth"
echo "-------------------------------------"
echo
if ! [ -f "config" ]; then
  echo "No config file available!"
  echo "Please copy sample file to 'config', edit and run this script again."
  exit 0
fi
echo "Press key - your options:"
echo " 'q' - exit"
echo " 't' - test install"
echo " 's' - test uninstall"
echo " 'i' - install"
echo " 'u' - uninstall"
echo

count=0
while : ; do
   read -n 1 k <&1
   if [[ $k = q ]] ; then
       printf "\nQuitting from the program.\n"
       exit 0
   elif [[ $k = t ]] ; then
       printf "\nRunning installation in test mode ...\n"
       test=".test"
       option="install"
       break
   elif [[ $k = s ]] ; then
       printf "\nRunning uninstallation in test mode ...\n"
       test=".test"
       option="uninstall"
       break
   elif [[ $k = i ]] ; then
       printf "\nStart installation ...\n"
       option="install"
       break
   elif [[ $k = u ]] ; then
       printf "\nStart deinstallation ...\n"
       option="uninstall"
       break
   else
       ((count=$count+1))
       printf "\nIterate for $count times\n"
       echo "Press 'q' to exit"
   fi
done


mkdir templates/backup_install
mkdir templates/backup_uninstall

# install software
#-----------------------------

system_install_software() {
  sudo apt-get update
  sudo apt-get upgrade
  sudo apt-get install -y hostapd
  sudo apt-get install -y dnsmasq
}


# disable automatic startup
#-----------------------------

system_disable_services() {
  sudo systemctl unmask hostapd
  sudo systemctl disable hostapd
  sudo systemctl disable dnsmasq
}

system_enable_services() {            # not checked yet ...
  sudo systemctl mask hostapd
  sudo systemctl enable hostapd
  sudo systemctl enable dnsmasq
}


# autohotspot
#-----------------------------

hotspot_install_script() {
  echo
  echo install hotspot scripts ...
  
  cp /etc/systemd/system/autohotspot.service 	templates/backup_install/autohotspot.service$test$date
  cp /usr/bin/autohotspot 			templates/backup_install/autohotspot$test$date
  
  cat templates/autohotspot.service  		> /etc/systemd/system/autohotspot.service$test
  cp templates/autohotspot                    /usr/bin/autohotspot$test
  
  sudo chmod +x /usr/bin/autohotspot$test
}

hotspot_uninstall_script() {           # not checked yet ...
  echo
  echo uninstall hotspot scripts ... 

  mv /etc/systemd/system/autohotspot.service$test 	templates/backup_uninstall/autohotspot.service$test$date
  mv /usr/bin/autohotspot$test                    	templates/backup_uninstall/autohotspot$test$date
}


# dns: define ip range
#-----------------------------

hotspot_config_on_dnsmasq() {
  cp /etc/dnsmasq.conf 				templates/backup_install/dnsmasq.conf$test$date
  cat templates/dnsmasq.conf 			> /etc/dnsmasq.conf$test
}

hotspot_config_off_dnsmasq() {

  mv /etc/dnsmasq.conf$test   			templates/backup_uninstall/dnsmasq.conf$test$date
}


# hostapd
#-----------------------------

hotspot_config_on_hostapd() {
  cp /etc/hostapd/hostapd.conf 			templates/backup_install/hostapd.conf$test$date
  cp templates/hostapd.conf			/etc/hostapd/hostapd.conf$test
  #envsubst < "templates/hostapd.conf.template"  > "/etc/hostapd/hostapd.conf$test"

  file_name="/etc/default/hostapd"

  file_content=$(cat $file_name)
  file_content=$(echo "$file_content" | sed -e "s/#DAEMON_CONF\=\"\"/DAEMON_CONF\=\"\/etc\/hostapd\/hostapd.conf\"/g")
  file_content=$(echo "$file_content" | sed -e "s/#DAEMON_CONF\=/DAEMON_CONF\=/g")
  echo "$file_content"     > $file_name$test

  file_content=$(cat $file_name$test)
  file_content=$(echo "$file_content" | sed -e "s/DAEMON_OPTS\=/#DAEMON_OPTS\=/g")
  echo "$file_content"     > $file_name$test
}

hotspot_config_off_hostapd() {          
  cp /etc/hostapd/hostapd.conf$test		templates/backup_uninstall/hostapd.conf$test$date
  
  file_name="/etc/default/hostapd"

  file_content=$(cat $file_name)
  file_content=$(echo "$file_content" | sed -e "s/DAEMON_CONF\=/#DAEMON_CONF\=/g")
  echo "$file_content"     > $file_name$test

  file_content=$(cat $file_name$test)
  file_content=$(echo "$file_content" | sed -e "s/#DAEMON_OPTS\=/DAEMON_OPTS\=/g")
  echo "$file_content"     > $file_name$test
}


# dhcp: stop dhcpcd from starting the wifi network so the autohotspot script in the next step takes control of that
#-----------------------------

hotspot_config_on_dhcp() {
  cp /etc/dhcpcd.conf				templates/backup_install/dhcpcd.conf$test$date
  
  if [[ $test != "" ]]; then
    cp /etc/dhcpcd.conf /etc/dhcpcd.conf$test
  fi
  
  echo "nohook wpa_supplicant"			>> /etc/dhcpcd.conf$test
}

hotspot_config_off_dhcp() {
  cp /etc/dhcpcd.conf$test			templates/backup_uninstall/dhcpcd.conf$test$date

  file_name="/etc/dhcpcd.conf"

  file_content=$(cat $file_name$test)
  file_content=$(echo "$file_content" | sed -e "s/nohook wpa_supplicant/#nohook wpa_supplicant")
  echo "$file_content"     > $file_name$test
}


# interfaces: remove any entry from interfaces
#-----------------------------

hotspot_config_on_interfaces() {
  cp /etc/network/interfaces$test		templates/backup_install/interfaces$test$date
  cat templates/interfaces$test			> /etc/network/interfaces$test
}

hotspot_config_off_interfaces() {
  # create new interfaces-file with existing login data or
  # get first version of interfaces-file
  # -> check how to configure if login data set via rasp-config
  echo "."
}


# wpa-supplicant
#-----------------------------

hotspot_config_on_wpa() {
  cp /etc/wpa_supplicant/wpa_supplicant.conf 		templates/backup_install/wpa_supplicant.conf$test$date
  cp templates/wpa_supplicant.conf                      /etc/wpa_supplicant/wpa_supplicant.conf$test
#  envsubst < "templates/wpa_supplicant.conf.template" > "/etc/wpa_supplicant/wpa_supplicant.conf$test"
}

hotspot_config_off_wpa() {
  mv /etc/wpa_supplicant/wpa_supplicant.conf$test 	templates/backup_uninstall/wpa_supplicant.conf$test$date
}


# service enable / disable
#-----------------------------

hotspot_enable_script() {
  systemctl enable autohotspot.service
  }

hotspot_disable_script() {
  systemctl disable autohotspot.service
  }


# instructions
#-----------------------------

hotspot_enable_crontab() {
  echo
  echo "Still to do manually ..."
  echo
  cat info.txt
  echo
}

hotspot_disable_crontab() {               # not checked yet ...
  echo
  echo "Still to do manually ..."
  echo
  cat info.txt
  echo
}


# main script
#-----------------------------

if [[ $option = "install" ]]; then

  if [[ $test = "" ]]; then
    system_install_software
    system_disable_services
  fi

  hotspot_install_script

  hotspot_config_on_dnsmasq
  hotspot_config_on_hostapd
  hotspot_config_on_dhcp
  hotspot_config_on_interfaces
  hotspot_config_on_wpa

  if [[ $test = "" ]]; then
    hotspot_enable_script
    hotspot_enable_crontab
  fi
  
fi
if [[ $option = "uninstall" ]]; then

  if [[ $test = "1" ]]; then
    hotspot_disable_crontab
    hotspot_disable_script
  fi

  hotspot_config_off_dnsmasq
  hotspot_config_off_hostapd
  hotspot_config_off_dhcp
  hotspot_config_off_interfaces
  hotspot_config_off_wpa

  if [[ $test = "1" ]]; then
    hotspot_uninstall_script
    system_enable_services
  fi
fi
