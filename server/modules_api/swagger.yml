swagger: "2.0"
info:
  version: "0.5.7"
  title: "jc://music-box/"
  description: API to control data handling and playback of music files and streams (use 'test' as uuid for test purposes)
  
consumes:
  - application/json
produces:
  - application/json

basePath: /api


paths:
#------------------------ MICROSERVICE INTERFACES ------------------------

  /set-card/{cardUID}/:
    put:
      operationId: modules_api.server_cmd.mboxAPI_setCard
      tags:
        - interface
      summary: set card ID to server
      description: used from card read module - server_rfid.py
      parameters:
        - name: cardUID
          in: path
          type: string
          required: true
      responses:
        200:
          description: Successfully read person from people list operation
          schema:
            properties:
              API:
                $ref: "#/definitions/API"
              REQUEST:
                $ref: "#/definitions/REQUEST"
              LOAD:
                $ref: "#/definitions/LOAD"
              STATUS:
                $ref: "#/definitions/STATUS"

  /set-button/{buttonID}/:
    put:
      operationId: modules_api.server_cmd.mboxAPI_setButton
      tags:
        - interface
      summary: set button ID to server
      description: used from button read module - server_button.py
      parameters:
        - name: buttonID
          in: path
          type: string
          required: true
      responses:
        200:
          description: Successfully read person from people list operation
          schema:
            properties:
              API:
                $ref: "#/definitions/API"
              REQUEST:
                $ref: "#/definitions/REQUEST"
              LOAD:
                $ref: "#/definitions/LOAD"
              STATUS:
                $ref: "#/definitions/STATUS"


#------------------------ SUPPORT FUNCTIONS ------------------------

  /version/{APPversion}/:
    get:
      operationId: modules_api.server_cmd.mboxAPI_checkVersion
      tags:
        - maintain
      summary: check if APP-version is supported
      description: check if APP-version is supported
      parameters:
        - name: APPversion
          in: path
          type: string
          required: true
      responses:
        200:
          description: Successfully read check APP version vs. API version
          schema:
            properties:
              API:
                $ref: "#/definitions/API"
              REQUEST:
                $ref: "#/definitions/REQUEST"
              LOAD:
                $ref: "#/definitions/LOAD"
              STATUS:
                $ref: "#/definitions/STATUS"

  /load/{param}/:
    put:
      operationId: modules_api.server_cmd.mboxAPI_load
      tags:
        - maintain
      summary: reload data or images
      description: reload data or images
      parameters:
        - name: param
          in: path
          type: string
          required: true
          enum: ["new","all","images"]
      responses:
        200:
          description: Successfully started data (re-)loading process
          schema:
            properties:
              API:
                $ref: "#/definitions/API"
              REQUEST:
                $ref: "#/definitions/REQUEST"
              LOAD:
                $ref: "#/definitions/LOAD"
              STATUS:
                $ref: "#/definitions/STATUS"

  /backup/{param}/:
    put:
      operationId: modules_api.server_cmd.mboxAPI_backup
      tags:
        - maintain
      summary: create / load backup
      description: create / load backup
      parameters:
        - name: param
          in: path
          type: string
          required: true
          enum: ["json2db","db2json"]
      responses:
        200:
          description: Successfully read person from people list operation
          schema:
            properties:
              API:
                $ref: "#/definitions/API"
              REQUEST:
                $ref: "#/definitions/REQUEST"
              LOAD:
                $ref: "#/definitions/LOAD"
              STATUS:
                $ref: "#/definitions/STATUS"
  /status/:
    get:
      operationId: modules_api.server_cmd.mboxAPI_status
      tags:
        - maintain
      summary: read server status data
      description: read server status data
      responses:
        200:
          description: Successfully read person from people list operation
          schema:
            properties:
              API:
                $ref: "#/definitions/API"
              REQUEST:
                $ref: "#/definitions/REQUEST"
              LOAD:
                $ref: "#/definitions/LOAD"
              STATUS:
                $ref: "#/definitions/STATUS"


#------------------------ READ DATA ------------------------

  /db/{databases}/{db_filter}/:
    get:
      operationId: modules_api.server_cmd.mboxAPI_readDB
      tags:
        - data
      summary: read data from database(s)
      description: to read multiple DB, combine names splitted by --
      parameters:
        - name: databases
          in: path
          type: string
          required: true
          enum: ["all","albums","album_info","cards","files","tracks","artists","radio","playlists","album_info--cards","playlists--cards","albums--album_info"]
        - name: db_filter
          in: path
          type: string
          required: true
      responses:
        200:
          description: Successfully read person from people list operation
          schema:
            properties:
              API:
                $ref: "#/definitions/API"
              REQUEST:
                $ref: "#/definitions/REQUEST"
              LOAD:
                $ref: "#/definitions/LOAD"
              STATUS:
                $ref: "#/definitions/STATUS"

  /data/{uuid}/{db_filter}/:
    get:
      operationId: modules_api.server_cmd.mboxAPI_readEntry
      tags:
        - data
      summary: read data from a single db entry
      description: read data from a single entry including tracks and album_info, if linked
      parameters:
        - name: uuid
          in: path
          type: string
          required: true
        - name: db_filter
          in: path
          type: string
          required: true
      responses:
        200:
          description: Successfully read person from people list operation
          schema:
            properties:
              API:
                $ref: "#/definitions/API"
              REQUEST:
                $ref: "#/definitions/REQUEST"
              LOAD:
                $ref: "#/definitions/LOAD"
              STATUS:
                $ref: "#/definitions/STATUS"


#------------------------ ADD / DELETE DATA ------------------------

  /data/{database}/{param}/:
    post:
      operationId: modules_api.server_cmd.mboxAPI_add
      tags:
        - data
      summary: create data set for radio or playlist
      description: other data sets are created by data load
      parameters:
        - name: database
          in: path
          type: string
          required: true
          enum: ["radio","playlists"]
        - name: param
          in: path
          type: string
          required: true
      responses:
        200:
          description: Successfully read person from people list operation
          schema:
            properties:
              API:
                $ref: "#/definitions/API"
              REQUEST:
                $ref: "#/definitions/REQUEST"
              LOAD:
                $ref: "#/definitions/LOAD"
              STATUS:
                $ref: "#/definitions/STATUS"


  /data/{uuid}/:
    delete:
      operationId: modules_api.server_cmd.mboxAPI_delete
      tags:
        - data
      summary: delete data set
      description: deletion including related items and links
      parameters:
        - name: uuid
          in: path
          type: string
          required: true
      responses:
        200:
          description: Successfully deleted data
          schema:
            properties:
              API:
                $ref: "#/definitions/API"
              REQUEST:
                $ref: "#/definitions/REQUEST"
              LOAD:
                $ref: "#/definitions/LOAD"
              STATUS:
                $ref: "#/definitions/STATUS"
    put:
      operationId: modules_api.server_cmd.mboxAPI_edit
      tags:
        - data
      summary: edit single data set
      description: edit data set with all elements that are transmitted (others stay unchanged)
      parameters:
        - name: uuid
          in: path
          type: string
          required: true
        - name: entry_data
          in: body
          description: data of a single entry
          schema:
            type: object
      responses:
        200:
          description: Successfully made changes
          schema:
            properties:
              API:
                $ref: "#/definitions/API"
              REQUEST:
                $ref: "#/definitions/REQUEST"
              LOAD:
                $ref: "#/definitions/LOAD"
              STATUS:
                $ref: "#/definitions/STATUS"


#------------------------ EDIT DATA ------------------------

  /images/{cmd}/{uuid}/{param}/:
    put:
      operationId: modules_api.server_cmd.mboxAPI_images
      tags:
        - data_items
      summary: Support functions
      description: Read one person from the people list
      parameters:
        - name: cmd
          in: path
          type: string
          required: true
          enum: ["upload","set_active"]
        - name: uuid
          in: path
          type: string
          required: true
        - name: param
          in: path
          type: string
          required: true
      responses:
        200:
          description: Successfully read person from people list operation
          schema:
            properties:
              API:
                $ref: "#/definitions/API"
              REQUEST:
                $ref: "#/definitions/REQUEST"
              LOAD:
                $ref: "#/definitions/LOAD"
              STATUS:
                $ref: "#/definitions/STATUS"

  /cards/{filter}/:
    get:
      operationId: modules_api.server_cmd.mboxAPI_cardInfos
      tags:
        - data_items
      summary: get card infos
      description: get card infos
      parameters:
        - name: filter
          in: path
          type: string
          required: true
      responses:
        200:
          description: Successfully made changes to card
          schema:
            properties:
              API:
                $ref: "#/definitions/API"
              REQUEST:
                $ref: "#/definitions/REQUEST"
              LOAD:
                $ref: "#/definitions/LOAD"
              STATUS:
                $ref: "#/definitions/STATUS"

  /cards/{uuid}/{param}/:
    put:
      operationId: modules_api.server_cmd.mboxAPI_cards
      tags:
        - data_items
      summary: connect cards to db-entry
      description: connect cards to db-entry
      parameters:
        - name: uuid
          in: path
          type: string
          required: true
        - name: param
          in: path
          type: string
          required: true
      responses:
        200:
          description: Successfully made changes to card
          schema:
            properties:
              API:
                $ref: "#/definitions/API"
              REQUEST:
                $ref: "#/definitions/REQUEST"
              LOAD:
                $ref: "#/definitions/LOAD"
              STATUS:
                $ref: "#/definitions/STATUS"

  /playlist_items/{cmd}/{uuid}/{param}/:
    put:
      operationId: modules_api.server_cmd.mboxAPI_playlist_items
      tags:
        - data_items
      summary: add or delete playlist items
      description: add or delete playlist items
      parameters:
        - name: cmd
          in: path
          type: string
          required: true
          enum: ["add","delete"]
        - name: uuid
          in: path
          type: string
          required: true
        - name: param
          in: path
          type: string
          required: true
      responses:
        200:
          description: Successfully read person from people list operation
          schema:
            properties:
              API:
                $ref: "#/definitions/API"
              REQUEST:
                $ref: "#/definitions/REQUEST"
              LOAD:
                $ref: "#/definitions/LOAD"
              STATUS:
                $ref: "#/definitions/STATUS"


#------------------------ PLAYBACK CONTROL ------------------------

  /play/{uuid}/:
    get:
      operationId: modules_api.server_cmd.mboxAPI_play
      tags:
        - playback
      summary: play item
      description: play track, album, playlist or web-stream
      parameters:
        - name: uuid
          in: path
          type: string
          required: true
      responses:
        200:
          description: Successfully started playback
          schema:
            properties:
              API:
                $ref: "#/definitions/API"
              REQUEST:
                $ref: "#/definitions/REQUEST"
              LOAD:
                $ref: "#/definitions/LOAD"
              STATUS:
                $ref: "#/definitions/STATUS"

  /play_next/{step}/:
    get:
      operationId: modules_api.server_cmd.mboxAPI_next
      tags:
        - playback
      summary: set step in playlist (1) - forward
      description: play next song
      parameters:
        - name: step
          in: path
          type: integer
          enum: [1,2,3,4]
          required: true
      responses:
        200:
          description: Successfully started playback
          schema:
            properties:
              API:
                $ref: "#/definitions/API"
              REQUEST:
                $ref: "#/definitions/REQUEST"
              LOAD:
                $ref: "#/definitions/LOAD"
              STATUS:
                $ref: "#/definitions/STATUS"

  /play_last/{step}/:
    get:
      operationId: modules_api.server_cmd.mboxAPI_last
      tags:
        - playback
      summary: set step in playlist (1) -backward
      description: play last song
      parameters:
        - name: step
          in: path
          type: integer
          enum: [1,2,3,4]
          required: true
      responses:
        200:
          description: Successfully started playback
          schema:
            properties:
              API:
                $ref: "#/definitions/API"
              REQUEST:
                $ref: "#/definitions/REQUEST"
              LOAD:
                $ref: "#/definitions/LOAD"
              STATUS:
                $ref: "#/definitions/STATUS"

  /play_jump/{percentage}/:
    get:
      operationId: modules_api.server_cmd.mboxAPI_jump
      tags:
        - playback
      summary: jump in playing song x seconds (-1,1)
      description: jump in playing song forward or backward
      parameters:
        - name: percentage
          in: path
          type: integer
          required: true
      responses:
        200:
          description: Successfully started playback
          schema:
            properties:
              API:
                $ref: "#/definitions/API"
              REQUEST:
                $ref: "#/definitions/REQUEST"
              LOAD:
                $ref: "#/definitions/LOAD"
              STATUS:
                $ref: "#/definitions/STATUS"
                
  /speek/{message}/:
    get:
      operationId: modules_api.server_cmd.mboxAPI_speek
      tags:
        - maintain
      summary: speek message
      description: speek message in the language, defined in the presets (has to exist, e.g. "LETS-GO")
      parameters:
        - name: message
          in: path
          type: string
          required: true
      responses:
        200:
          description: Successfully started playback
          schema:
            properties:
              API:
                $ref: "#/definitions/API"
              REQUEST:
                $ref: "#/definitions/REQUEST"
              LOAD:
                $ref: "#/definitions/LOAD"
              STATUS:
                $ref: "#/definitions/STATUS"

  /pause/:
    get:
      operationId: modules_api.server_cmd.mboxAPI_pause
      tags:
        - playback
      summary: pause playback
      description: pause playback
      responses:
        200:
          description: Successfully paused playback
          schema:
            properties:
              API:
                $ref: "#/definitions/API"
              REQUEST:
                $ref: "#/definitions/REQUEST"
              LOAD:
                $ref: "#/definitions/LOAD"
              STATUS:
                $ref: "#/definitions/STATUS"

  /stop/:
    get:
      operationId: modules_api.server_cmd.mboxAPI_stop
      tags:
        - playback
      summary: stop playback
      description: stop playback
      responses:
        200:
          description: Successfully paused playback
          schema:
            properties:
              API:
                $ref: "#/definitions/API"
              REQUEST:
                $ref: "#/definitions/REQUEST"
              LOAD:
                $ref: "#/definitions/LOAD"
              STATUS:
                $ref: "#/definitions/STATUS"


  /volume/{param}/:
    get:
      operationId: modules_api.server_cmd.mboxAPI_volume
      tags:
        - playback
      summary: set volume
      description: set volume (mute, up, down, set[0..100])
      parameters:
        - name: param
          in: path
          type: string
#          enum: ["mute","up","down"]
          required: true
      responses:
        200:
          description: Successfully started playback
          schema:
            properties:
              API:
                $ref: "#/definitions/API"
              REQUEST:
                $ref: "#/definitions/REQUEST"
              LOAD:
                $ref: "#/definitions/LOAD"
              STATUS:
                $ref: "#/definitions/STATUS"


#------------------------ DATA MODEL DEFINITIONS ------------------------

definitions:

  API:
    type: object
    properties:
      stage:
        type: string
      rollout:
        type: string
      version:
        type: string
      name:
        type: string

  REQUEST:
    type: object
    properties:
      load-time:
        type: number
        format: float
      start-time:
        type: number
        format: float
      command:
        type: string
      status:
        type: string
      db_filter:
        type: string

  STATUS:
    type: object
    properties:
      active_device:
        type: string
      system:
        type: object
        properties:
          space_main_available:
            type: number
            format: float
          space_main_used:
            type: number
            format: float
          space_main_mount:
            type: string
          space_usb_available:
            type: number
            format: float
          space_usb_used:
            type: number
            format: float
          space_usb_mount:
            type: string
      playback:
        type: object
        properties:
          device:
            type: string
          file:
            type: string
          length:
            type: number
            format: float
          mute:
            type: number
            format: float
          playing:
            type: number
            format: float
          position:
            type: number
            format: float
          song:
            type: object
          state:
            type: string
          status:
            type: string
          volume:
            type: number
            format: float
      load:
        type: object
        properties:
          reload_new:
            type: boolean
          reload_all:
            type: boolean
          reload_time_left:
            type: number
          reload_progress:
            type: number

  LOAD:
    type: object
    properties:
      UUID:
        type: string
      RFID:
        type: string
      BUTTON:
        type: string

  DATA:
    type: object
    properties:
      _selected:
        type: object
      _selected_db:
        type: string
      _selected_uuid:
        type: string
      albums:
        type: object
      artists:
        type: object
      album_info:
        type: object
      playlists:
        type: object
      radio:
        type: object
      cards:
        type: object
      files:
        type: array
        items:
          properties:
            filename:
              type: object
      tracks:
#        $ref: "#/definitions/TRACKS"
        type: array
        items:
          properties:
            track_uuid:
              $ref: "#/definitions/TRACKS"

  TRACKS:
    type: object
    properties:
      album: 
        type: string
      album_dir:
        type: string
      album_artist:
        type: string
      artist:
        type: string
      compilation:
        type: number
      cover_images:
        type: object
        properties:
          active:
            type: string
          track:
            type: array
            items:
              type: string
          dir:
            type: array
            items:
              type: string
          upload:
            type: array
            items:
              type: string
          web:
            type: array
            items:
              type: string
      file:
        type: string
      filesize:
        type: number
        format: float
      genre:
        type: string
      length:
        type: number
        format: float
      title:
        type: string
      track_num:
        type: array
        items:
          type: number
      uuid:
        type: string
      uuid_album:
        type: string

